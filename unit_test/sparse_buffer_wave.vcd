$version Generated by VerilatedVcd $end
$date Tue Oct 15 14:15:40 2024 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 ; clk_i $end
  $var wire  1 A read_allowIn_o $end
  $var wire  3 B read_ptr_i [2:0] $end
  $var wire  1 D read_rtn_allowIn_i $end
  $var wire  8 E read_rtn_data_o [7:0] $end
  $var wire  1 C read_rtn_valid_o $end
  $var wire  1 @ read_valid_i $end
  $var wire  1 < rstn_i $end
  $var wire  3 G sparse_buffer_bottom_ptr_o [2:0] $end
  $var wire  8 F sparse_buffer_valid_o [7:0] $end
  $var wire  1 > write_allowIn_o $end
  $var wire  8 ? write_data_i [7:0] $end
  $var wire  1 = write_valid_i $end
  $scope module sparse_buffer $end
   $var wire 32 J AW [31:0] $end
   $var wire 32 I DW [31:0] $end
   $var wire 32 I SIZE [31:0] $end
   $var wire  3 8 bottom_ptr_In [2:0] $end
   $var wire  3 9 bottom_ptr_Q [2:0] $end
   $var wire  1 ; clk_i $end
   $var wire  1 A read_allowIn_o $end
   $var wire  1 H read_kickoff $end
   $var wire  3 B read_ptr_i [2:0] $end
   $var wire  1 D read_rtn_allowIn_i $end
   $var wire  8 E read_rtn_data_o [7:0] $end
   $var wire  1 C read_rtn_valid_o $end
   $var wire  1 @ read_valid_i $end
   $var wire  1 < rstn_i $end
   $var wire  8 # sparse_array_In[0] [7:0] $end
   $var wire  8 $ sparse_array_In[1] [7:0] $end
   $var wire  8 % sparse_array_In[2] [7:0] $end
   $var wire  8 & sparse_array_In[3] [7:0] $end
   $var wire  8 ' sparse_array_In[4] [7:0] $end
   $var wire  8 ( sparse_array_In[5] [7:0] $end
   $var wire  8 ) sparse_array_In[6] [7:0] $end
   $var wire  8 * sparse_array_In[7] [7:0] $end
   $var wire  8 - sparse_array_Q[0] [7:0] $end
   $var wire  8 . sparse_array_Q[1] [7:0] $end
   $var wire  8 / sparse_array_Q[2] [7:0] $end
   $var wire  8 0 sparse_array_Q[3] [7:0] $end
   $var wire  8 1 sparse_array_Q[4] [7:0] $end
   $var wire  8 2 sparse_array_Q[5] [7:0] $end
   $var wire  8 3 sparse_array_Q[6] [7:0] $end
   $var wire  8 4 sparse_array_Q[7] [7:0] $end
   $var wire  8 + sparse_array_valid_In [7:0] $end
   $var wire  8 5 sparse_array_valid_Q [7:0] $end
   $var wire  3 G sparse_buffer_bottom_ptr_o [2:0] $end
   $var wire  8 F sparse_buffer_valid_o [7:0] $end
   $var wire  1 > write_allowIn_o $end
   $var wire  8 ? write_data_i [7:0] $end
   $var wire  1 , write_kickoff $end
   $var wire  3 6 write_ptr_In [2:0] $end
   $var wire  3 7 write_ptr_Q [2:0] $end
   $var wire  1 = write_valid_i $end
   $scope module u_fid_bottom_ptr_impl $end
    $var wire  3 9 bottom_ptr_current [2:0] $end
    $var wire  3 8 bottom_ptr_next [2:0] $end
    $var wire  8 5 entry_valid_i [7:0] $end
    $var wire  8 : entry_valid_shift [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000000 *
b00000000 +
0,
b00000000 -
b00000000 .
b00000000 /
b00000000 0
b00000000 1
b00000000 2
b00000000 3
b00000000 4
b00000000 5
b001 6
b000 7
b111 8
b000 9
b00000000 :
0;
0<
0=
0>
b00000000 ?
0@
0A
b000 B
0C
0D
b00000000 E
b00000000 F
b000 G
0H
b00000000000000000000000000001000 I
b00000000000000000000000000000011 J
#1
b111 9
1;
1>
#2
b00000001 +
1,
0;
1<
1=
#3
b00000011 +
b00000001 5
b010 6
b001 7
b000 8
b00000010 :
1;
b00000001 F
#4
b00000001 $
0;
b00000001 ?
#5
b00000001 %
b00000111 +
b00000001 .
b00000011 5
b011 6
b010 7
b000 9
b00000011 :
1;
b00000011 F
#6
b00000010 %
0;
b00000010 ?
#7
b00000010 &
b00001111 +
b00000010 /
b00000111 5
b100 6
b011 7
b00000111 :
1;
b00000111 F
#8
b00000011 &
0;
b00000011 ?
#9
b00000011 '
b00011111 +
b00000011 0
b00001111 5
b101 6
b100 7
b00001111 :
1;
b00001111 F
#10
b00000100 '
0;
b00000100 ?
#11
b00000100 (
b00111111 +
b00000100 1
b00011111 5
b110 6
b101 7
b00011111 :
1;
b00011111 F
#12
b00000101 (
0;
b00000101 ?
#13
b00000101 )
b01111111 +
b00000101 2
b00111111 5
b111 6
b110 7
b00111111 :
1;
b00111111 F
#14
b00000110 )
0;
b00000110 ?
#15
b00000110 *
b11111111 +
b00000110 3
b01111111 5
b000 6
b111 7
b01111111 :
1;
b01111111 F
#16
b00000111 *
0;
b00000111 ?
#17
0,
b00000111 4
b11111111 5
b001 6
b000 7
b11111111 :
1;
0>
b11111111 F
#18
0;
0=
#19
1;
#20
0;
#21
1;
